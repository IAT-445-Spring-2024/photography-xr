//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""1970eb82-18ba-4dde-a763-8739178aadd5"",
            ""actions"": [
                {
                    ""name"": ""Adjust"",
                    ""type"": ""Value"",
                    ""id"": ""1119bfd1-2a9d-41d1-a6be-ba2245fee5db"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Show Album"",
                    ""type"": ""Button"",
                    ""id"": ""95b12561-1b7c-4238-8b29-b82ea99c081c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous Photo"",
                    ""type"": ""Button"",
                    ""id"": ""2fe20109-ef17-42de-b809-2d5f9f772074"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Next Photo"",
                    ""type"": ""Button"",
                    ""id"": ""4b56099c-f1ce-4d94-a8de-08a8f5dd8ede"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm Scene"",
                    ""type"": ""Button"",
                    ""id"": ""f8ee9baa-bf82-47a4-b4d5-92472fa2b6c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f02dcb30-7875-48ab-8d83-2450edc39c07"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Adjust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c0782c3-dcc7-47d0-8dcc-002af9a08ad9"",
                    ""path"": ""<XRController>{LeftHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Show Album"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f72784c1-7252-4a3f-affb-5d1915772c54"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous Photo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32f08ec4-149e-4909-817c-602b2c680a53"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Photo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""812813ea-5518-4263-abdf-b5ef6d7dfeec"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm Scene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Adjust = m_Player.FindAction("Adjust", throwIfNotFound: true);
        m_Player_ShowAlbum = m_Player.FindAction("Show Album", throwIfNotFound: true);
        m_Player_PreviousPhoto = m_Player.FindAction("Previous Photo", throwIfNotFound: true);
        m_Player_NextPhoto = m_Player.FindAction("Next Photo", throwIfNotFound: true);
        m_Player_ConfirmScene = m_Player.FindAction("Confirm Scene", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Adjust;
    private readonly InputAction m_Player_ShowAlbum;
    private readonly InputAction m_Player_PreviousPhoto;
    private readonly InputAction m_Player_NextPhoto;
    private readonly InputAction m_Player_ConfirmScene;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Adjust => m_Wrapper.m_Player_Adjust;
        public InputAction @ShowAlbum => m_Wrapper.m_Player_ShowAlbum;
        public InputAction @PreviousPhoto => m_Wrapper.m_Player_PreviousPhoto;
        public InputAction @NextPhoto => m_Wrapper.m_Player_NextPhoto;
        public InputAction @ConfirmScene => m_Wrapper.m_Player_ConfirmScene;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Adjust.started += instance.OnAdjust;
            @Adjust.performed += instance.OnAdjust;
            @Adjust.canceled += instance.OnAdjust;
            @ShowAlbum.started += instance.OnShowAlbum;
            @ShowAlbum.performed += instance.OnShowAlbum;
            @ShowAlbum.canceled += instance.OnShowAlbum;
            @PreviousPhoto.started += instance.OnPreviousPhoto;
            @PreviousPhoto.performed += instance.OnPreviousPhoto;
            @PreviousPhoto.canceled += instance.OnPreviousPhoto;
            @NextPhoto.started += instance.OnNextPhoto;
            @NextPhoto.performed += instance.OnNextPhoto;
            @NextPhoto.canceled += instance.OnNextPhoto;
            @ConfirmScene.started += instance.OnConfirmScene;
            @ConfirmScene.performed += instance.OnConfirmScene;
            @ConfirmScene.canceled += instance.OnConfirmScene;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Adjust.started -= instance.OnAdjust;
            @Adjust.performed -= instance.OnAdjust;
            @Adjust.canceled -= instance.OnAdjust;
            @ShowAlbum.started -= instance.OnShowAlbum;
            @ShowAlbum.performed -= instance.OnShowAlbum;
            @ShowAlbum.canceled -= instance.OnShowAlbum;
            @PreviousPhoto.started -= instance.OnPreviousPhoto;
            @PreviousPhoto.performed -= instance.OnPreviousPhoto;
            @PreviousPhoto.canceled -= instance.OnPreviousPhoto;
            @NextPhoto.started -= instance.OnNextPhoto;
            @NextPhoto.performed -= instance.OnNextPhoto;
            @NextPhoto.canceled -= instance.OnNextPhoto;
            @ConfirmScene.started -= instance.OnConfirmScene;
            @ConfirmScene.performed -= instance.OnConfirmScene;
            @ConfirmScene.canceled -= instance.OnConfirmScene;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnAdjust(InputAction.CallbackContext context);
        void OnShowAlbum(InputAction.CallbackContext context);
        void OnPreviousPhoto(InputAction.CallbackContext context);
        void OnNextPhoto(InputAction.CallbackContext context);
        void OnConfirmScene(InputAction.CallbackContext context);
    }
}
